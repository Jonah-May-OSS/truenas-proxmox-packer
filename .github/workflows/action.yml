# action.yml
name: freenas-proxmox Package
on:
  push:
  repository_dispatch:
    types: [build_push]
env:
  pluginName: 'freenas-proxmox'
  debDistro: 'bullseye'

jobs:
  Build_freenas-proxmox_Debian_package:
    runs-on: ubuntu-latest
    steps:
      - name: Set our variables for the feature branch.
        if: contains(github.event.client_payload.ref, 'feature')
        run: |
          echo "pluginVersion=3.0.0-0-alpha1" >> $GITHUB_ENV
          echo "repoVersion=development" >> $GITHUB_ENV
          echo "repoTagetDir=${{ secrets.KSAT_REPO_DEVELOPMENT_TARGET }}" >> $GITHUB_ENV

      - name: Set our variables for the ng branch for the development repo.
        if: contains(github.event.client_payload.ref, 'ng')
        run: |
          echo "pluginVersion=3.0.0-0-alpha1" >> $GITHUB_ENV
          echo "gitBranch=development" >> $GITHUB_ENV
          echo "debComponent=development" >> $GITHUB_ENV

      - name: Set our variables for the master branch for the testing repo.
#        if: contains(github.event.client_payload.ref, 'master')
        run: |
          echo "pluginVersion=2.2.0-0-beta7" >> $GITHUB_ENV
          echo "gitBranch=testing" >> $GITHUB_ENV
          echo "debComponent=testing" >> $GITHUB_ENV

      - name: Set our variables for the 2.0 branch for the stable repo.
        if: contains(github.event.client_payload.ref, '2.0')
        run: |
          echo "pluginVersion=2.1.0-1" >> $GITHUB_ENV
          echo "gitBranch=stable/v2.0" >> $GITHUB_ENV
          echo "debComponent=main" >> $GITHUB_ENV

      - name: Make sure dpkg is installed.
        run: sudo apt-get install dpkg

      - name: Checkout freenas-proxmox-packer.
        uses: actions/checkout@v2

      - name: Change permissions on file and package in a deb file.
        run: |
          sudo chmod 0755 ${{ env.gitBranch }}/DEBIAN/postinst
          sudo chmod 0755 ${{ env.gitBranch }}/DEBIAN/postrm
          sudo dpkg-deb --build ${{ env.gitBranch }} ${{ env.pluginName }}_${{ env.pluginVersion }}_all.deb

      - name: Upload Debian package to JFrog
        run: |
          sudo ls -l
          sudo curl -u${{ secrets.JFROG_REPO_USERNAME }}:${{ secrets.JFROG_REPO_PASSWORD }} -X PUT "${{ secrets.JFROG_REPO_URL }}${{ env.pluginName }}_${{ env.pluginVersion }}_all.deb;deb.distribution=${{ env.debDistro }};deb.component=${{ env.debComponent }};deb.architecture=amd64" -T .


#      - name: Remove old packages from repo.
#        uses: appleboy/ssh-action@master
#        with:
#         host: ${{ secrets.KSAT_REPO_HOST }}
#         port: ${{ secrets.KSAT_REPO_PORT }}
#          username: ${{ secrets.KSAT_REPO_USERNAME }}
#          key: ${{ secrets.KSAT_REPO_SECRET }}
#          passphrase: ${{ secrets.KSAT_REPO_PASSPHRASE }}
#          script: |
#            sudo rm -f ${{ env.repoTagetDir }}/*.deb

#      - name: Upload package to repo.
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.KSAT_REPO_HOST }}
#          port: ${{ secrets.KSAT_REPO_PORT }}
#          username: ${{ secrets.KSAT_REPO_USERNAME }}
#          key: ${{ secrets.KSAT_REPO_SECRET }}
#          passphrase: ${{ secrets.KSAT_REPO_PASSPHRASE }}
#          source: ${{ env.pluginName }}-${{ env.pluginVersion }}_all.deb
#          target: ${{ env.repoTagetDir }}

#      - name: Refresh repo.
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.KSAT_REPO_HOST }}
#          port: ${{ secrets.KSAT_REPO_PORT }}
#          username: ${{ secrets.KSAT_REPO_USERNAME }}
#          key: ${{ secrets.KSAT_REPO_SECRET }}
#          passphrase: ${{ secrets.KSAT_REPO_PASSPHRASE }}
#          script: |
#            sudo ./${{ env.repoRefreshCmd }}

