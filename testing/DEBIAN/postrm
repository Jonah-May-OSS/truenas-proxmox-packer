#!/bin/sh
# TrueNAS-Proxmox post-removal script (DEBIAN/postrm)
set -euo pipefail

_DEBUG=${_DEBUG:-on}

# Detect Proxmox version (for LIB_PATH and backup preference)
if PVE_VERSION=$(dpkg-query --showformat='${Version}' --show pve-manager 2>/dev/null); then :; else PVE_VERSION="unknown"; fi
MAJOR_VER=${PVE_VERSION%%.*}
case "$MAJOR_VER" in
  7) LIB_PATH="/usr/share/pve-7" ;;
  *) LIB_PATH="/usr/share" ;;
esac

TRUENAS_PLUGIN_FILEPATH="${LIB_PATH}/perl5/PVE/Storage/LunCmd/TrueNAS.pm"
ZFSPLUGIN_FILEPATH="${LIB_PATH}/perl5/PVE/Storage/ZFSPlugin.pm"
PVEMANAGER_FILEPATH="${LIB_PATH}/pve-manager/js/pvemanagerlib.js"
APIDOC_FILEPATH="${LIB_PATH}/pve-docs/api-viewer/apidoc.js"

BACKUP_ROOT="/var/lib/truenas-proxmox/backups"

latest_backup_dir() {
  [ -d "$BACKUP_ROOT" ] || return 1
  # Prefer exact version prefix, else newest by mtime
  match="$(ls -1dt "${BACKUP_ROOT}/${PVE_VERSION}-"* 2>/dev/null | head -n1 || true)"
  [ -n "${match:-}" ] && { echo "$match"; return 0; }
  any="$(ls -1dt "${BACKUP_ROOT}/"* 2>/dev/null | head -n1 || true)"
  [ -n "${any:-}" ] && { echo "$any"; return 0; }
  return 1
}

restore_from_backup_dir() {
  srcdir="$1"; shift
  for target in "$@"; do
    [ -n "$target" ] || continue
    base="$(basename "$target")"
    src="$srcdir/$base"
    if [ -f "$src" ]; then
      echo "Restoring $target from $src"
      cp -a "$src" "$target"
    fi
  done
}

echo "Running postrm with action '${1:-}'..."

case "${1:-}" in
  remove)
    echo "-- remove: cleaning plugin and restoring from latest versioned backup"
    rm -f "$TRUENAS_PLUGIN_FILEPATH" || true
    if bdir="$(latest_backup_dir)"; then
      echo "Using backup dir: $bdir"
      restore_from_backup_dir "$bdir" \
        "$ZFSPLUGIN_FILEPATH" \
        "$PVEMANAGER_FILEPATH" \
        "$APIDOC_FILEPATH"
      systemctl try-restart pvedaemon pveproxy pvestatd || true
    else
      echo "No backups under $BACKUP_ROOT; leaving files as-is."
    fi
    ;;

  purge)
    echo "-- purge: removing versioned backups"
    [ -d "$BACKUP_ROOT" ] && rm -rf "$BACKUP_ROOT"
    ;;

  upgrade|abort-upgrade)
    echo "-- $1: no post-removal cleanup needed"
    ;;

  *)
    echo "-- no action for postrm arg '$1'"
    ;;
esac

exit 0
