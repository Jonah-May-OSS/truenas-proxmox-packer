#!/bin/bash
# Abort on any error, undefined variable, or pipeline failure
set -euo pipefail

# Debugging toggle
_DEBUG="on"

# Setup base variables
LIB_PATH="/usr/share"
PVEMANAGER_FILEPATH="${LIB_PATH}/pve-manager/js/pvemanagerlib.js"
ZFSPLUGIN_FILEPATH="${LIB_PATH}/perl5/PVE/Storage/ZFSPlugin.pm"
APIDOC_FILEPATH="${LIB_PATH}/pve-docs/api-viewer/apidoc.js"
FREENAS_FILEPATH="${LIB_PATH}/perl5/PVE/Storage/LunCmd/TrueNAS.pm"
GIT_LOCAL_REPO_PATH="/usr/local/src/"
GIT_REPO_NAME="truenas-proxmox"

# Patch args depending on debug
PATCH_ARGS="${_DEBUG:-off}" == "on" && echo "--verbose -b --ignore-whitespace" || echo "-s -b --ignore-whitespace"

# Utility: Restore a backup if it exists
restore_backup() {
    local orig_file="$1.orig"
    local target_file="$1"
    if [ -f "$orig_file" ]; then
        echo "Restoring original file $target_file from $orig_file"
        cp "$orig_file" "$target_file"
    else
        echo "WARNING: Backup file $orig_file not found. Skipping restore for $target_file"
    fi
}

# Main logic
echo "Initiating '$1' with arg '${2:-}'"

case "$1" in
  remove|upgrade)
    # Clean up cloned repo
    if [ -d "${GIT_LOCAL_REPO_PATH}${GIT_REPO_NAME}" ]; then
        echo "Removing local git repo '${GIT_LOCAL_REPO_PATH}${GIT_REPO_NAME}'"
        rm -rf "${GIT_LOCAL_REPO_PATH}${GIT_REPO_NAME}"
    fi

    # Remove TrueNAS.pm if present
    if [ -f "${FREENAS_FILEPATH}" ]; then
        echo "Removing TrueNAS.pm LUN plugin '${FREENAS_FILEPATH}'"
        rm -f "${FREENAS_FILEPATH}"
    fi

    echo "Reinstalling original Proxmox VE files..."

    # Restore backups carefully
    restore_backup "${ZFSPLUGIN_FILEPATH}"
    restore_backup "${PVEMANAGER_FILEPATH}"
    restore_backup "${APIDOC_FILEPATH}"

    echo "Restarting Proxmox services..."
    systemctl restart pvedaemon pveproxy pvestatd pvescheduler

    ;;

  purge|failed-upgrade|disappear|abort-upgrade|abort-remove|abort-deconfigure)
    # No specific action needed
    ;;

  *)
    echo "$0: unknown argument '$1'" >&2
    exit 1
    ;;
esac

exit 0
