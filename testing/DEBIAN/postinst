#!/bin/sh
# TrueNAS-Proxmox post-install script
set -eu

_DEBUG=${_DEBUG:-on}

# 1) Detect Proxmox version
if PVE_VERSION=$(dpkg-query --showformat='${Version}' --show pve-manager 2>/dev/null); then :; else PVE_VERSION="unknown"; fi
MAJOR_VER=${PVE_VERSION%%.*}
[ "$_DEBUG" = "on" ] && echo "Proxmox Version: $PVE_VERSION (Major: $MAJOR_VER)"

# 2) Determine library path
case "$MAJOR_VER" in
  7) LIB_PATH="/usr/share/pve-7" ;;
  *) LIB_PATH="/usr/share"    ;;
esac

# 3) Define file paths
PVEMANAGER_FILEPATH="$LIB_PATH/pve-manager/js/pvemanagerlib.js"
APIDOC_FILEPATH="$LIB_PATH/pve-docs/api-viewer/apidoc.js"
ZFSPLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/ZFSPlugin.pm"
TRUENAS_PLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/LunCmd/TrueNAS.pm"
REST_CLIENT_FILEPATH="$LIB_PATH/perl5/REST/Client.pm"

# 4) Patches directory
PATCH_DIR="/usr/share/truenas-proxmox/patches"

echo "Running TrueNAS-Proxmox post-install..."

# 5) Backup originals
[ "$_DEBUG" = "on" ] && echo "Backing up originals..."
for orig in \
  "$PVEMANAGER_FILEPATH" \
  "$APIDOC_FILEPATH" \
  "$ZFSPLUGIN_FILEPATH" \
; do
  [ -f "$orig" ] && [ ! -f "${orig}.orig" ] && {
    echo " - cp $orig â†’ ${orig}.orig"
    cp -a "$orig" "${orig}.orig"
  }
done

# 6) Apply GUI patches
if [ -d "$PATCH_DIR" ]; then
  echo "Applying GUI patches..."
  [ -f "$PATCH_DIR/pvemanagerlib.patch" ] && patch --forward "$PVEMANAGER_FILEPATH" < "$PATCH_DIR/pvemanagerlib.patch" || echo "(pvemanagerlib failed)"
  [ -f "$PATCH_DIR/apidoc.patch" ]       && patch --forward "$APIDOC_FILEPATH"   < "$PATCH_DIR/apidoc.patch"       || echo "(apidoc failed)"

  # 7) Apply ZFSPlugin.pm patch (now without any -pX)
  if [ -f "$PATCH_DIR/ZFSPlugin.pm.patch" ]; then
    echo "Applying ZFSPlugin.pm patch..."
    patch --forward "$ZFSPLUGIN_FILEPATH" < "$PATCH_DIR/ZFSPlugin.pm.patch" || echo "(ZFSPlugin.pm patch failed)"
  fi
fi

# 8) Verify required files
echo "Verifying required files..."
missing=0
for file in \
  "$PVEMANAGER_FILEPATH" \
  "$APIDOC_FILEPATH" \
  "$ZFSPLUGIN_FILEPATH" \
  "$TRUENAS_PLUGIN_FILEPATH" \
  "$REST_CLIENT_FILEPATH" \
; do
  [ ! -f "$file" ] && {
    echo "ERROR: missing $file"
    missing=1
  }
done
[ "$missing" -ne 0 ] && { echo "Aborting."; exit 1; }

echo "All required files present."

# 9) Reload services
echo "Reloading Proxmox services..."
systemctl reload-or-restart pvedaemon.service    || true
systemctl reload-or-restart pveproxy.service     || true
systemctl reload-or-restart pvestatd.service     || true
systemctl reload-or-restart pvescheduler.service || true

echo "Installation complete."
exit 0
