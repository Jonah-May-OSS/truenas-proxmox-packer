#!/bin/sh
# TrueNAS-Proxmox post-install script (drop-in)
set -euo pipefail

_DEBUG=${_DEBUG:-on}

# 1) Detect Proxmox version
if PVE_VERSION=$(dpkg-query --showformat='${Version}' --show pve-manager 2>/dev/null); then :; else PVE_VERSION="unknown"; fi
MAJOR_VER=${PVE_VERSION%%.*}
[ "$_DEBUG" = "on" ] && echo "Proxmox Version: $PVE_VERSION (Major: $MAJOR_VER)"

# 2) Library path
case "$MAJOR_VER" in
  7) LIB_PATH="/usr/share/pve-7" ;;
  *) LIB_PATH="/usr/share" ;;
esac

# 3) Targets
PVEMANAGER_FILEPATH="$LIB_PATH/pve-manager/js/pvemanagerlib.js"
ZFSPLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/ZFSPlugin.pm"
TRUENAS_PLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/LunCmd/TrueNAS.pm"

echo "Running TrueNAS-Proxmox post-install…"

# 4) Versioned backups (never reused)
STAMP="$(date +%F-%H%M%S)"
PVEV="${PVE_VERSION:-unknown}"
BACKUP_DIR="/var/lib/truenas-proxmox/backups/${PVEV}-${STAMP}"
mkdir -p "$BACKUP_DIR"

backup() {
  local src="$1"
  [ -f "$src" ] || return 0
  local name; name="$(basename "$src")"
  cp -a "$src" "$BACKUP_DIR/$name"
  echo " - backed up $src -> $BACKUP_DIR/$name"
}
backup "$PVEMANAGER_FILEPATH"
backup "$ZFSPLUGIN_FILEPATH"

# 5) Ensure TrueNAS provider file exists & compiles (fail early)
if [ ! -f "$TRUENAS_PLUGIN_FILEPATH" ]; then
  echo "ERROR: $TRUENAS_PLUGIN_FILEPATH not found"
  exit 1
fi
perl -c "$TRUENAS_PLUGIN_FILEPATH"

# 6) GUI tweaks (idempotent)
if [ -f "$PVEMANAGER_FILEPATH" ]; then
  echo "Applying TrueNAS GUI tweaks…"

  grep -q "['truenas', 'TrueNAS']" "$PVEMANAGER_FILEPATH" || \
    sed -i "/\['comstar', 'Comstar'\]/a \        ['truenas', 'TrueNAS']," "$PVEMANAGER_FILEPATH"

  grep -q "isTrueNAS:" "$PVEMANAGER_FILEPATH" || \
    sed -i "/isComstar: *true,/a \            isTrueNAS: false,\n            isLIO: false," "$PVEMANAGER_FILEPATH"

  grep -q "vm.set('isTrueNAS'" "$PVEMANAGER_FILEPATH" || \
    sed -i "/vm.set('isComstar',/a \            vm.set('isTrueNAS', newVal === 'truenas');" "$PVEMANAGER_FILEPATH"

  # keep this replace unconditional
  sed -i "s/vm\.set('hasWriteCacheOption'.*/vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'truenas' || newVal === 'istgt');/" "$PVEMANAGER_FILEPATH"
else
  echo "WARNING: $PVEMANAGER_FILEPATH not found, skipping GUI tweaks."
fi

# 7) ZFSPlugin.pm — provider injection (PVE 8/9; flexible anchors)
if [ -f "$ZFSPLUGIN_FILEPATH" ]; then
  echo "Patching ZFSPlugin.pm (provider)…"

  # 7.1 import TrueNAS provider (idempotent)
  grep -q "LunCmd::TrueNAS;" "$ZFSPLUGIN_FILEPATH" || \
    sed -i "/use PVE::Storage::LunCmd::Comstar;/a use PVE::Storage::LunCmd::TrueNAS;" "$ZFSPLUGIN_FILEPATH"

  # 7.2 add list_extent capability (idempotent)
  sed -E -i "/list_view[[:space:]]*=>[[:space:]]*1,/{
a\ \ \ \ list_extent => 1,
}" "$ZFSPLUGIN_FILEPATH"

  # 7.3 add TrueNAS::get_base branch — reuse optional ($scfg) if present
  if ! grep -q "TrueNAS::get_base" "$ZFSPLUGIN_FILEPATH"; then
    sed -E -i "s|(return[[:space:]]+PVE::Storage::LunCmd::Comstar::get_base(\(\$scfg\))?[[:space:]]*;)|\1\
\n    } elsif (\$scfg->{iscsiprovider} eq 'truenas') {\
\n        return PVE::Storage::LunCmd::TrueNAS::get_base\2;|g" "$ZFSPLUGIN_FILEPATH"
  fi

  # 7.4 add TrueNAS::run_lun_command branch (mirror args) — idempotent
  grep -q "TrueNAS::run_lun_command" "$ZFSPLUGIN_FILEPATH" || \
    sed -E -i "/PVE::Storage::LunCmd::Comstar::run_lun_command[[:space:]]*\([[:space:]]*\$scfg[[:space:]]*,[[:space:]]*\$timeout[[:space:]]*,[[:space:]]*\$method[[:space:]]*,[[:space:]]*@params[[:space:]]*\)[[:space:]]*;/a \        } elsif (\$scfg->{iscsiprovider} eq 'truenas') {\n            \$msg = PVE::Storage::LunCmd::TrueNAS::run_lun_command(\$scfg, \$timeout, \$method, \@params);" "$ZFSPLUGIN_FILEPATH"

  # 7.5 error text cosmetic (tolerant)
  sed -E -i "s/Available[[:space:]]*\[[^]]*\]/Available [comstar, truenas, istgt, iet, LIO]/" "$ZFSPLUGIN_FILEPATH"

  # Compile + quick verifies
  perl -c "$ZFSPLUGIN_FILEPATH"
  grep -q "TrueNAS::get_base" "$ZFSPLUGIN_FILEPATH" || { echo "ERROR: get_base insert missing"; exit 1; }
  grep -q "TrueNAS::run_lun_command" "$ZFSPLUGIN_FILEPATH" || { echo "ERROR: run_lun_command insert missing"; exit 1; }
else
  echo "WARNING: $ZFSPLUGIN_FILEPATH not found, skipping provider patch."
fi

# 8) ZFSPlugin.pm — WWID / multipath helper (idempotent; no-op for libiscsi)
if [ -f "$ZFSPLUGIN_FILEPATH" ]; then
  echo "Adding WWID/multipath helper…"

  # helper once (above '1;')
  if ! grep -q "sub zfs_get_wwid_number" "$ZFSPLUGIN_FILEPATH"; then
    sed -i "/^1;$/i sub zfs_get_wwid_number {\n  my (\$class, \$scfg, \$guid) = \@_;\n  die \"could not find lun_number for guid \$guid\" unless \$guid;\n  return \$class->zfs_request(\$scfg, undef, \"list_extent\", \$guid);\n}\n" "$ZFSPLUGIN_FILEPATH"
  fi

  # multipath resolver after first 'my $path = ...' (only once)
  if ! grep -q "Multipath enhancement" "$ZFSPLUGIN_FILEPATH"; then
    sed -i "/my \$path =/a \    # Multipath enhancement\n    eval {\n      if (\$path =~ m{^/dev/}) {\n        my \$wwid = \$class->zfs_get_wwid_number(\$scfg, \$guid);\n        if (\$wwid =~ /^([-\@\\\\w.]+)\$/) { \$wwid = \$1 } else { die \"Bad data in '\$wwid'\" }\n        my \$wwid_end = substr \$wwid, 16;\n        my \$line = \`/usr/sbin/multipath -ll | grep \"\$\$wwid_end\"\`;\n        my (\$mapper_device) = split(' ' , \$line);\n        if (\$mapper_device && -b \"/dev/mapper/\$mapper_device\") {\n          \$path = \"/dev/mapper/\$mapper_device\";\n        }\n      }\n    };" "$ZFSPLUGIN_FILEPATH"
  fi

  perl -c "$ZFSPLUGIN_FILEPATH" || { echo "ERROR: ZFSPlugin.pm syntax error after multipath patch"; exit 1; }
fi

# 9) Reload services & sanity-load modules
systemctl restart pvedaemon pveproxy pvestatd
perl -MPVE::Storage::ZFSPlugin -e1
perl -MPVE::Storage::LunCmd::TrueNAS -e1

echo "Installation complete."
exit 0
