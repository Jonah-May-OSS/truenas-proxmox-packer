#!/bin/sh
# TrueNAS-Proxmox post-install script
set -euo pipefail

_DEBUG=${_DEBUG:-on}

# 1) Detect Proxmox version
if PVE_VERSION=$(dpkg-query --showformat='${Version}' --show pve-manager 2>/dev/null); then :; else PVE_VERSION="unknown"; fi
MAJOR_VER=${PVE_VERSION%%.*}
[ "$_DEBUG" = "on" ] && echo "Proxmox Version: $PVE_VERSION (Major: $MAJOR_VER)"

# 2) Library path
case "$MAJOR_VER" in
  7) LIB_PATH="/usr/share/pve-7" ;;
  *) LIB_PATH="/usr/share" ;;
esac

# 3) Targets
PVEMANAGER_FILEPATH="$LIB_PATH/pve-manager/js/pvemanagerlib.js"
ZFSPLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/ZFSPlugin.pm"
TRUENAS_PLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/LunCmd/TrueNAS.pm"

echo "Running TrueNAS-Proxmox post-install…"

# 4) Versioned backups (never reused)
STAMP="$(date +%F-%H%M%S)"
PVEV="${PVE_VERSION:-unknown}"
BACKUP_DIR="/var/lib/truenas-proxmox/backups/${PVEV}-${STAMP}"
mkdir -p "$BACKUP_DIR"

backup() {
  local src="$1"
  [ -f "$src" ] || return 0
  local name; name="$(basename "$src")"
  cp -a "$src" "$BACKUP_DIR/$name"
  echo " - backed up $src -> $BACKUP_DIR/$name"
}
backup "$PVEMANAGER_FILEPATH"
backup "$ZFSPLUGIN_FILEPATH"

# 5) Ensure TrueNAS provider file exists & compiles (fail early)
if [ ! -f "$TRUENAS_PLUGIN_FILEPATH" ]; then
  echo "ERROR: $TRUENAS_PLUGIN_FILEPATH not found"
  exit 1
fi
perl -c "$TRUENAS_PLUGIN_FILEPATH"

# 6) GUI tweaks (idempotent)
if [ -f "$PVEMANAGER_FILEPATH" ]; then
  echo "Applying TrueNAS GUI tweaks…"
  grep -q "['truenas', 'TrueNAS']" "$PVEMANAGER_FILEPATH" || \
    sed -i "/\['comstar', 'Comstar'\]/a \\
        ['truenas', 'TrueNAS']," "$PVEMANAGER_FILEPATH"

  grep -q "isTrueNAS:" "$PVEMANAGER_FILEPATH" || \
    sed -i "/isComstar: *true,/a \\
            isTrueNAS: false,\\
            isLIO: false," "$PVEMANAGER_FILEPATH"

  grep -q "vm.set('isTrueNAS'" "$PVEMANAGER_FILEPATH" || \
    sed -i "/vm.set('isComstar',/a \\
            vm.set('isTrueNAS', newVal === 'truenas');" "$PVEMANAGER_FILEPATH"

  # keep this replace unconditional
  sed -i "s/vm\.set('hasWriteCacheOption'.*/vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'truenas' || newVal === 'istgt');/" "$PVEMANAGER_FILEPATH"
else
  echo "WARNING: $PVEMANAGER_FILEPATH not found, skipping GUI tweaks."
fi

# 7) ZFSPlugin.pm — provider injection (works on PVE 8/9; anchor-agnostic)
if [ -f "$ZFSPLUGIN_FILEPATH" ]; then
  echo "Applying TrueNAS sed tweaks to ZFSPlugin.pm..."
  sed -i \
    -e "/use PVE::Storage::LunCmd::Comstar;/a \
use PVE::Storage::LunCmd::TrueNAS;" \
    -e "/list_view   => 1,/a \\
    list_extent => 1," \
    -e "s/Available \[comstar, istgt, iet, LIO\]/Available [comstar, truenas, istgt, iet, LIO]/g" \
    -e "/return PVE::Storage::LunCmd::Comstar::get_base;/a \\
    } elsif (\$scfg\->{iscsiprovider} eq 'truenas') { \\
        return PVE::Storage::LunCmd::TrueNAS::get_base;" \
    -e "/return PVE::Storage::LunCmd::Comstar::get_base($scfg);/a \\
    } elsif (\$scfg\->{iscsiprovider} eq 'truenas') { \\
        return PVE::Storage::LunCmd::TrueNAS::get_base($scfg);" \
    -e "/PVE::Storage::LunCmd::Comstar::run_lun_command/a \\
        } elsif (\$scfg\->{iscsiprovider} eq 'truenas') { \\
            \$msg = PVE::Storage::LunCmd::TrueNAS::run_lun_command(\$scfg, \$timeout, \$method, \@params);" \
    -e "/my \$path =/a \\
    # Multipath enhancement" \
    -e "/my \$path =/a \\
    eval {" \
    -e "/my \$path =/a \\
      my \$wwid = \$class->zfs_get_wwid_number(\$scfg, \$guid);" \
    -e "/my \$path =/a \\
      if (\$wwid =~ /^([-\\\@\\\\w.]+)\$/) {" \
    -e "/my \$path =/a \\
        \$wwid = \$1;" \
    -e "/my \$path =/a \\
      } else {" \
    -e "/my \$path =/a \\
        die \"Bad data in '\$wwid'\";" \
    -e "/my \$path =/a \\
      }" \
    -e "/my \$path =/a \\
      my \$wwid_end = substr \$wwid, 16;" \
    -e "/my \$path =/a \\
      my \$mapper = \"\";" \
    -e "/my \$path =/a \\
      sleep 3;" \
    -e "/my \$path =/a \\
      run_command(\"iscsiadm -m session --rescan\");" \
    -e "/my \$path =/a \\
      sleep 3;" \
    -e "/my \$path =/a \\
      my \$line = \`/usr/sbin/multipath -ll | grep \"\$\$wwid_end\"\`;" \
    -e "/my \$path =/a \\
      my (\$mapper_device) = split(' ' , \$line);" \
    -e "/my \$path =/a \\
      \$mapper_device = \"\" unless \$mapper_device;" \
    -e "/my \$path =/a \\
      \$mapper .= \$mapper_device;" \
    -e "/my \$path =/a \\
      if (\$mapper ne \"\") {" \
    -e "/my \$path =/a \\
        \$path = \"/dev/mapper/\$mapper\";" \
    -e "/my \$path =/a \\
        sleep 5;" \
    -e "/my \$path =/a \\
      }" \
    -e "/my \$path =/a \\
    };" \
    -e "/^1;$/i \\
sub zfs_get_wwid_number { \\
  my (\$class, \$scfg, \$guid) = \@_; \\
  die \"could not find lun_number for guid \$guid\" unless \$guid; \\
  return \$class->zfs_request(\$scfg, undef, \"list_extent\", \$guid); \\
}" \
    "$ZFSPLUGIN_FILEPATH"
else
  echo "WARNING: $ZFSPLUGIN_FILEPATH not found, skipping ZFSPlugin.pm sed tweaks."
fi

# 8) Reload services & sanity-load modules
systemctl restart pvedaemon pveproxy pvestatd
perl -MPVE::Storage::ZFSPlugin -e1
perl -MPVE::Storage::LunCmd::TrueNAS -e1

echo "Installation complete."
exit 0
