#!/bin/sh
# TrueNAS-Proxmox post-install script
set -eu

_DEBUG=${_DEBUG:-on}

# 1) Detect Proxmox version
if PVE_VERSION=$(dpkg-query --showformat='${Version}' --show pve-manager 2>/dev/null); then :; else PVE_VERSION="unknown"; fi
MAJOR_VER=${PVE_VERSION%%.*}
[ "$_DEBUG" = "on" ] && echo "Proxmox Version: $PVE_VERSION (Major: $MAJOR_VER)"

# 2) Determine library path
case "$MAJOR_VER" in
  7) LIB_PATH="/usr/share/pve-7" ;;
  *) LIB_PATH="/usr/share"    ;;
esac

# 3) Define file paths
PVEMANAGER_FILEPATH="$LIB_PATH/pve-manager/js/pvemanagerlib.js"
APIDOC_FILEPATH="$LIB_PATH/pve-docs/api-viewer/apidoc.js"
ZFSPLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/ZFSPlugin.pm"
TRUENAS_PLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/LunCmd/TrueNAS.pm"

# 4) Patches directory (deprecated for pvemanagerlib.js)
PATCH_DIR="/usr/share/truenas-proxmox/patches"

echo "Running TrueNAS-Proxmox post-install..."

# 5) Backup originals
[ "$_DEBUG" = "on" ] && echo "Backing up originals..."
for orig in \
  "$PVEMANAGER_FILEPATH" \
  "$APIDOC_FILEPATH" \
  "$ZFSPLUGIN_FILEPATH" \
; do
  [ -f "$orig" ] && [ ! -f "${orig}.orig" ] && {
    echo " - cp $orig â†’ ${orig}.orig"
    cp -a "$orig" "${orig}.orig"
  }
done

# 6) Apply Proxmox tweaks via sed
# 6.1 Apply pvemanagerlib.js tweaks via sed
if [ -f "$PVEMANAGER_FILEPATH" ]; then
  echo "Applying TrueNAS GUI sed tweaks to pvemanagerlib.js..."
  # 6.1.1 Insert TrueNAS option after Comstar
  sed -i "/\['comstar', 'Comstar'\]/a \        ['truenas', 'TrueNAS']" "$PVEMANAGER_FILEPATH"
  # 6.1.2 Add viewModel flags
  sed -i "/isComstar: *true,/a \            isTrueNAS: false,\n            isLIO: false," "$PVEMANAGER_FILEPATH"
  # 6.1.3 In changeISCSIProvider(), add TrueNAS flag
  sed -i "/vm.set('isComstar',/a \        vm.set('isTrueNAS', newVal === 'truenas');" "$PVEMANAGER_FILEPATH"
  # 6.1.4 Replace hasWriteCacheOption logic
  sed -i "s/vm\.set('hasWriteCacheOption'.*/        vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'truenas' || newVal === 'istgt');/" "$PVEMANAGER_FILEPATH"
else
  echo "WARNING: $PVEMANAGER_FILEPATH not found, skipping GUI sed tweaks."
fi

# 6.2 Apply apidoc.js tweaks via sed
if [ -f "$APIDOC_FILEPATH" ]; then
  echo "Applying TrueNAS API doc sed tweaks to apidoc.js..."
  # 6.2.1 Insert 'target' before transport entries
  sed -i "/\"transport\" *:/i \                        \"target\" : {\n                           \"description\" : \"iSCSI target.\",\n                           \"optional\" : 1,\n                           \"type\" : \"string\",\n                           \"typetext\" : \"<string>\"\n                        }," "$APIDOC_FILEPATH"
  # 6.2.2 Insert 'target' after fuse blocks
  sed -i "/\"fuse\" *: *{/a \                        \"target\" : {\n                           \"description\" : \"iSCSI target.\",\n                           \"optional\" : 1,\n                           \"type\" : \"string\",\n                           \"typetext\" : \"<string>\"\n                        }," "$APIDOC_FILEPATH"
else
  echo "WARNING: $APIDOC_FILEPATH not found, skipping apidoc.js sed tweaks."
fi

# 6.3 Apply ZFSPlugin.pm tweaks via sed
if [ -f "$ZFSPLUGIN_FILEPATH" ]; then
  echo "Applying TrueNAS sed tweaks to ZFSPlugin.pm..."
  # 6.3.1 Insert TrueNAS LunCmd use line
  sed -i "/use PVE::Storage::LunCmd::Comstar;/a use PVE::Storage::LunCmd::TrueNAS;" "$ZFSPLUGIN_FILEPATH"
  # 6.3.2 Add list_extent in plugin registration
  sed -i "/list_view   => 1,/a \    list_extent => 1," "$ZFSPLUGIN_FILEPATH"
  # 6.3.3 Extend unknown provider die list
  sed -i "s#Available \\\[comstar, istgt, iet, LIO\\\\]#Available [comstar, truenas, istgt, iet, LIO]#g" "$ZFSPLUGIN_FILEPATH"
  # 6.3.4 Add get_base branch
  sed -i "/return PVE::Storage::LunCmd::Comstar::get_base;/a \    } elsif (\\$scfg->{iscsiprovider} eq 'truenas') {\n        return PVE::Storage::LunCmd::TrueNAS::get_base;" "$ZFSPLUGIN_FILEPATH"
  # 6.3.5 Add run_lun_command branch
  sed -i "/PVE::Storage::LunCmd::Comstar::run_lun_command/ a \        } elsif (\\$scfg->{iscsiprovider} eq 'truenas') {\n            \$msg = PVE::Storage::LunCmd::TrueNAS::run_lun_command(\\$scfg, \$timeout, \$method, @params);" "$ZFSPLUGIN_FILEPATH"
  # 6.3.6 Add zfs_get_wwid_number sub
  sed -i "/^}/i # Part of the multipath enhancement\nsub zfs_get_wwid_number {\n    my (\$class, \$scfg, \$guid) = \@_;\n\n    die \"could not find lun_number for guid \$guid\" if !\$guid;\n\n    return \$class->zfs_request(\$scfg, undef, 'list_extent', \$guid);\n}\n" "$ZFSPLUGIN_FILEPATH"
  # 6.3.7 Add multipath eval block after 'my \$path ='
  sed -i "/my \$path =/a \    # Multipath enhancement\n    eval {\n        my \$wwid = \$class->zfs_get_wwid_number(\$scfg, \$guid);\n\n        if (\$wwid =~ /^([\-\@\\w.]+)\$/) {\n            \$wwid = \$1;\n        } else {\n            die \"Bad data in '\$wwid'\";\n        }\n        my \$wwid_end = substr \$wwid, 16;\n\n        my \$mapper = '';\n        sleep 3;\n        run_command(\"iscsiadm -m session --rescan\");\n        sleep 3;\n        my \$line = \`/usr/sbin/multipath -ll | grep "\$wwid_end"\`;\n        my (\$mapper_device) = split(' ', \$line);\n        \$mapper_device = '' unless \$mapper_device;\n        \$mapper .= \$mapper_device;\n\n        if (\$mapper =~ /^([\-\@\\w.]+)\$/) {\n            \$mapper = \$1;\n        } else {\n            \$mapper = '';\n        }\n\n        if (\$mapper ne "") {\n            \$path = \"/dev/mapper/\$mapper\";\n            sleep 5;\n        }\n    };" "$ZFSPLUGIN_FILEPATH"
else
  echo "WARNING: $ZFSPLUGIN_FILEPATH not found, skipping ZFSPlugin.pm sed tweaks."
fi

# 7) Verify required files
echo "Verifying required files..."
missing=0
for file in \
  "$PVEMANAGER_FILEPATH" \
  "$APIDOC_FILEPATH" \
  "$ZFSPLUGIN_FILEPATH" \
  "$TRUENAS_PLUGIN_FILEPATH" \
; do
  [ ! -f "$file" ] && {
    echo "ERROR: missing $file"
    missing=1
  }
done
[ "$missing" -ne 0 ] && { echo "Aborting."; exit 1; }

echo "All required files present."

# 9) Reload services
echo "Reloading Proxmox services..."
systemctl reload-or-restart pvedaemon.service    || true
systemctl reload-or-restart pveproxy.service     || true
systemctl reload-or-restart pvestatd.service     || true
systemctl reload-or-restart pvescheduler.service || true

echo "Installation complete."
exit 0
