#!/bin/sh
# TrueNAS-Proxmox post-install script
set -euo pipefail

_DEBUG=${_DEBUG:-on}

# 1) Detect Proxmox version
if PVE_VERSION=$(dpkg-query --showformat='${Version}' --show pve-manager 2>/dev/null); then :; else PVE_VERSION="unknown"; fi
MAJOR_VER=${PVE_VERSION%%.*}
[ "$_DEBUG" = "on" ] && echo "Proxmox Version: $PVE_VERSION (Major: $MAJOR_VER)"

# 2) Library path
case "$MAJOR_VER" in
  7) LIB_PATH="/usr/share/pve-7" ;;
  *) LIB_PATH="/usr/share" ;;
esac

# 3) Targets
PVEMANAGER_FILEPATH="$LIB_PATH/pve-manager/js/pvemanagerlib.js"
ZFSPLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/ZFSPlugin.pm"
TRUENAS_PLUGIN_FILEPATH="$LIB_PATH/perl5/PVE/Storage/LunCmd/TrueNAS.pm"

echo "Running TrueNAS-Proxmox post-install…"

# 4) Versioned backups (never reused)
STAMP="$(date +%F-%H%M%S)"
PVEV="${PVE_VERSION:-unknown}"
BACKUP_DIR="/var/lib/truenas-proxmox/backups/${PVEV}-${STAMP}"
mkdir -p "$BACKUP_DIR"

backup() {
  local src="$1"
  [ -f "$src" ] || return 0
  local name; name="$(basename "$src")"
  cp -a "$src" "$BACKUP_DIR/$name"
  echo " - backed up $src -> $BACKUP_DIR/$name"
}
backup "$PVEMANAGER_FILEPATH"
backup "$ZFSPLUGIN_FILEPATH"

# 5) Ensure TrueNAS provider file exists & compiles (fail early)
if [ ! -f "$TRUENAS_PLUGIN_FILEPATH" ]; then
  echo "ERROR: $TRUENAS_PLUGIN_FILEPATH not found"
  exit 1
fi
perl -c "$TRUENAS_PLUGIN_FILEPATH"

# 6) GUI tweaks (idempotent)
if [ -f "$PVEMANAGER_FILEPATH" ]; then
  echo "Applying TrueNAS GUI tweaks…"
  grep -q "['truenas', 'TrueNAS']" "$PVEMANAGER_FILEPATH" || \
    sed -i "/\['comstar', 'Comstar'\]/a \\
        ['truenas', 'TrueNAS']," "$PVEMANAGER_FILEPATH"

  grep -q "isTrueNAS:" "$PVEMANAGER_FILEPATH" || \
    sed -i "/isComstar: *true,/a \\
            isTrueNAS: false,\\
            isLIO: false," "$PVEMANAGER_FILEPATH"

  grep -q "vm.set('isTrueNAS'" "$PVEMANAGER_FILEPATH" || \
    sed -i "/vm.set('isComstar',/a \\
            vm.set('isTrueNAS', newVal === 'truenas');" "$PVEMANAGER_FILEPATH"

  # keep this replace unconditional
  sed -i "s/vm\.set('hasWriteCacheOption'.*/vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'truenas' || newVal === 'istgt');/" "$PVEMANAGER_FILEPATH"
else
  echo "WARNING: $PVEMANAGER_FILEPATH not found, skipping GUI tweaks."
fi

# 7) ZFSPlugin.pm — provider injection (works on PVE 8/9; anchor-agnostic)
if [ -f "$ZFSPLUGIN_FILEPATH" ]; then
  echo "Patching ZFSPlugin.pm (provider)…"

  # Import TrueNAS provider (idempotent)
  perl -0777 -i -e '
    my $f = do { local $/; <> };
    $f =~ s/(use \s+ PVE::Storage::LunCmd::Comstar;)(?!.*LunCmd::TrueNAS;)/$1\nuse PVE::Storage::LunCmd::TrueNAS;/sx;
    print $f;
  ' "$ZFSPLUGIN_FILEPATH"

  # Add list_extent capability (idempotent)
  perl -0777 -i -e '
    my $f = do { local $/; <> };
    $f =~ s/(list_view \s* => \s* 1,)(?!.*list_extent \s* => \s* 1)/$1\n    list_extent => 1,/sx;
    print $f;
  ' "$ZFSPLUGIN_FILEPATH"

  # Insert TrueNAS::get_base right after Comstar::get_base[($scfg)]
  perl -0777 -i -e '
    my $f = do { local $/; <> };
    if ($f !~ /TrueNAS::get_base/) {
      my $n = ($f =~ s{
        (return \s+ PVE::Storage::LunCmd::Comstar::get_base) (\([^\)]*\))? \s* ;
      }{$1$2;
      } elsif (\$scfg->{iscsiprovider} eq '\''truenas'\'') {
          return PVE::Storage::LunCmd::TrueNAS::get_base$2;
      } }sx);
      die "ANCHOR(get_base) not found\n" unless $n;
    }
    print $f;
  ' "$ZFSPLUGIN_FILEPATH"

  # Insert TrueNAS::run_lun_command after Comstar branch (mirror args)
  perl -0777 -i -e '
    my $f = do { local $/; <> };
    if ($f !~ /TrueNAS::run_lun_command/) {
      my $n = ($f =~ s{
        (\$msg \s* = \s* PVE::Storage::LunCmd::Comstar::run_lun_command
           \s* \(\s* \$scfg \s* , \s* \$timeout \s* , \s* \$method \s* , \s* \@params \s* \) \s* ; \s*)
      }{$1        } elsif (\$scfg->{iscsiprovider} eq '\''truenas'\'') {
              \$msg = PVE::Storage::LunCmd::TrueNAS::run_lun_command(\$scfg, \$timeout, \$method, \@params);
          } }sx);
      die "ANCHOR(run_lun_command) not found\n" unless $n;
    }
    print $f;
  ' "$ZFSPLUGIN_FILEPATH"

  # Error text (cosmetic)
  perl -0777 -i -pe "s/Available \[comstar, *istgt, *iet, *LIO\]/Available [comstar, truenas, istgt, iet, LIO]/g" "$ZFSPLUGIN_FILEPATH"

  # Compile + verify inserts
  perl -c "$ZFSPLUGIN_FILEPATH"
  grep -q "TrueNAS::get_base" "$ZFSPLUGIN_FILEPATH" || { echo "ERROR: get_base insert missing"; exit 1; }
  grep -q "TrueNAS::run_lun_command" "$ZFSPLUGIN_FILEPATH" || { echo "ERROR: run_lun_command insert missing"; exit 1; }
else
  echo "WARNING: $ZFSPLUGIN_FILEPATH not found, skipping provider patch."
fi

# 8) ZFSPlugin.pm — WWID / multipath helper (idempotent; no-op for libiscsi)
if [ -f "$ZFSPLUGIN_FILEPATH" ]; then
  echo "Patching ZFSPlugin.pm (WWID/multipath)…"

  # Add helper once
  grep -q "sub zfs_get_wwid_number" "$ZFSPLUGIN_FILEPATH" || \
    sed -i -e "/^1;$/i \\
sub zfs_get_wwid_number { \\
  my (\$class, \$scfg, \$guid) = \@_; \\
  die \"could not find lun_number for guid \$guid\" unless \$guid; \\
  return \$class->zfs_request(\$scfg, undef, \"list_extent\", \$guid); \\
}" "$ZFSPLUGIN_FILEPATH"

  # Inject resolver after first 'my $path = ...' (only once)
  if ! grep -q "Multipath enhancement" "$ZFSPLUGIN_FILEPATH"; then
    sed -i \
      -e "/my \$path =/a \\
    # Multipath enhancement (only when using kernel block devices)\\
    eval {\\
      if (\$path =~ m{^/dev/}) {\\
        my \$wwid = \$class->zfs_get_wwid_number(\$scfg, \$guid);\\
        if (\$wwid =~ /^([-\\\@\\\\w.]+)\$/) { \$wwid = \$1 } else { die \"Bad data in '\$wwid'\" }\\
        my \$wwid_end = substr \$wwid, 16;\\
        my \$line = \`/usr/sbin/multipath -ll | grep \"\$\$wwid_end\"\`;\\
        my (\$mapper_device) = split(' ' , \$line);\\
        if (\$mapper_device && -b \"/dev/mapper/\$mapper_device\") {\\
          \$path = \"/dev/mapper/\$mapper_device\";\\
          syslog('info', \"ZFSPlugin multipath: using \$path for \$guid\");\\
        }\\
      }\\
    };" \
      "$ZFSPLUGIN_FILEPATH"
  fi

  # Compile check again
  perl -c "$ZFSPLUGIN_FILEPATH" || { echo "ERROR: ZFSPlugin.pm syntax error after multipath patch"; exit 1; }
fi

# 9) Reload services & sanity-load modules
systemctl restart pvedaemon pveproxy pvestatd
perl -MPVE::Storage::ZFSPlugin -e1
perl -MPVE::Storage::LunCmd::TrueNAS -e1

echo "Installation complete."
exit 0
